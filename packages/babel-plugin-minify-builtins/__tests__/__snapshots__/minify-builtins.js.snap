// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`minify-builtins should collect and minify in segments if there is no common ancestor 1`] = `
Object {
  "_source": "function a(){
  function d(){
    Math.floor(as, bb);
  }
}
function b(){
  Math.floor(as, bb);
  function d(){
    Math.floor(as, bb);
  }
}
function c(){
  Math.floor(as, bb);
  function d(){
    Math.floor(as, bb);
  }
}",
  "expected": "function a() {
  function d() {
    Math.floor(as, bb);
  }
}
function b() {
  var _Mathfloor = Math.floor;

  _Mathfloor(as, bb);
  function d() {
    _Mathfloor(as, bb);
  }
}
function c() {
  var _Mathfloor2 = Math.floor;

  _Mathfloor2(as, bb);
  function d() {
    _Mathfloor2(as, bb);
  }
}",
}
`;

exports[`minify-builtins should collect and minify no matter any depth 1`] = `
Object {
  "_source": "function a (){
  Math.max(b, a);
  function b() {
    const a = Math.floor(c);
    Math.min(b, a) * Math.floor(b);
    function c() {
      Math.floor(c) + Math.min(b, a)
    }
  }
}",
  "expected": "function a() {
  Math.max(b, a);
  function b() {
    var _Mathmin = Math.min;
    var _Mathfloor = Math.floor;

    const a = _Mathfloor(c);
    _Mathmin(b, a) * _Mathfloor(b);
    function c() {
      _Mathfloor(c) + _Mathmin(b, a);
    }
  }
}",
}
`;

exports[`minify-builtins should evalaute expressions if applicable and optimize it 1`] = `
Object {
  "_source": "const a = Math.max(Math.floor(2), 5);
let b = 1.8;
let x = Math.floor(Math.max(a, b));
foo(x);",
  "expected": "const a = 5;
let b = 1.8;
let x = 5;
foo(x);",
}
`;

exports[`minify-builtins should minify standard built in methods 1`] = `
Object {
  "_source": "function c() {
  let a = 10;
  const d = Number.isNaN(a);
  Math.max(a, b) + Math.max(b, a);
  return d && Number.isFinite(a);
}",
  "expected": "function c() {
  var _Mathmax = Math.max;

  let a = 10;
  const d = false;
  _Mathmax(a, b) + _Mathmax(b, a);
  return d && true;
}",
}
`;

exports[`minify-builtins should minify standard built in properties 1`] = `
Object {
  "_source": "function a () {
  Number.NAN + Number.NAN;
  return Math.PI + Math.PI + Number.EPSILON + Number.NAN;
}",
  "expected": "function a() {
  var _MathPI = Math.PI;
  var _NumberNAN = Number.NAN;

  _NumberNAN + _NumberNAN;
  return _MathPI + _MathPI + Number.EPSILON + _NumberNAN;
}",
}
`;

exports[`minify-builtins should not evaluate if its side effecty 1`] = `
Object {
  "_source": "Math.max(foo(), 1);
Math.random();",
  "expected": "Math.max(foo(), 1);
Math.random();",
}
`;

exports[`minify-builtins should not minify for computed properties 1`] = `
Object {
  "_source": "let max = \\"floor\\";
Math[max](1.5);",
  "expected": "let max = \\"floor\\";
Math[max](1.5);",
}
`;

exports[`minify-builtins should take no of occurences in to account 1`] = `
Object {
  "_source": "function a() {
  Math.floor(a) + Math.floor(b) + Math.min(a, b);
}",
  "expected": "function a() {
  var _Mathfloor = Math.floor;

  _Mathfloor(a) + _Mathfloor(b) + Math.min(a, b);
}",
}
`;

exports[`minify-builtins shouldn't minify builtins in the program scope to avoid leaking 1`] = `
Object {
  "_source": "Math.max(c, d)
function a (){
  Math.max(b, a) + Math.max(c, d);
}
Math.max(e, f)",
  "expected": "Math.max(c, d);
function a() {
  var _Mathmax = Math.max;

  _Mathmax(b, a) + _Mathmax(c, d);
}
Math.max(e, f);",
}
`;
