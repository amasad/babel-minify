exports[`minify-builtins should collect and minify no matter any depth 1`] = `
Object {
  "_source": "Math.max(a, b) + Math.max(a, b);
function a (){
  Math.max(b, a);
  return function b() {
    const a = Math.floor(c);
    Math.min(b, a) * Math.floor(b);
  }
}",
  "expected": "var _Mathfloor = Math.floor;
var _Mathmax = Math.max;
_Mathmax(a, b) + _Mathmax(a, b);
function a() {
  _Mathmax(b, a);
  return function b() {
    const a = _Mathfloor(c);
    Math.min(b, a) * _Mathfloor(b);
  };
}",
}
`;

exports[`minify-builtins should evalaute expressions if applicable and optimize it 1`] = `
Object {
  "_source": "const a = Math.max(Math.floor(2), 5);
let b = 1.8;
let x = Math.floor(Math.max(a, b));
foo(x);",
  "expected": "const a = 5;
let b = 1.8;
let x = 5;
foo(x);",
}
`;

exports[`minify-builtins should minify standard built in methods 1`] = `
Object {
  "_source": "Math.max(a, b) + Math.max(b, a);
function c() {
  let a = 10;
  const d = Number.isNaN(a);
  return d && Number.isFinite(a);
}",
  "expected": "var _Mathmax = Math.max;
_Mathmax(a, b) + _Mathmax(b, a);
function c() {
  let a = 10;
  const d = false;
  return d && true;
}",
}
`;

exports[`minify-builtins should minify standard built in properties 1`] = `
Object {
  "_source": "Number.NAN + Number.NAN;
function a () {
  return Math.PI + Math.PI + Number.EPSILON + Number.NAN;
}",
  "expected": "var _MathPI = Math.PI;
var _NumberNAN = Number.NAN;
_NumberNAN + _NumberNAN;
function a() {
  return _MathPI + _MathPI + Number.EPSILON + _NumberNAN;
}",
}
`;

exports[`minify-builtins should not evaluate if its has side effecty arguments 1`] = `
Object {
  "_source": "Math.max(foo(), 1);",
  "expected": "Math.max(foo(), 1);",
}
`;

exports[`minify-builtins should not minify for computed properties 1`] = `
Object {
  "_source": "let max = \"floor\";
Math[max](1.5);",
  "expected": "let max = \"floor\";
Math[max](1.5);",
}
`;

exports[`minify-builtins should take no of occurences in to account 1`] = `
Object {
  "_source": "function a() {
  return Math.floor(a) + Math.floor(b) + Math.min(a, b);
}
Math.floor(a) + Math.max(a, b);",
  "expected": "var _Mathfloor = Math.floor;
function a() {
  return _Mathfloor(a) + _Mathfloor(b) + Math.min(a, b);
}
_Mathfloor(a) + Math.max(a, b);",
}
`;
